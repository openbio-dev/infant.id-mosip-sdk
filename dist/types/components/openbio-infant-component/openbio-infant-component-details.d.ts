import '../../stencil.core';
import WS from "../../utils/websocket";
export declare class OpenbioFingerComponent {
    ws: WS;
    private wsStatusInterval;
    private canvas?;
    private tempFingersData;
    private minutiateFingers;
    private fingerNames;
    private person;
    private payload;
    componentContainer: HTMLStencilElement;
    detached: boolean;
    isTagComponent: boolean;
    tempPerson: any;
    tempFingers: any;
    cpf: string;
    personImage: string;
    personName: string;
    singleCapture: boolean;
    fingerCaptureType: number;
    useOpenbioMatcher: boolean;
    onCaptureFingerprint: Function;
    onOpenbioMatcher: Function;
    forceLoad: boolean;
    theme: string;
    capturedData: any;
    originalImage: string;
    deviceReady: boolean;
    nfiqScore: number;
    captureType: number;
    captureTypeName: string;
    stepPhase: number;
    flowType: number;
    currentRollingStatus: number;
    currentStatusLineX: number;
    flowOptions: Array<any>;
    anomalyOptions: Array<any>;
    anomaly: any;
    anomalies: Array<any>;
    currentFingerNames: Array<string>;
    currentFingerImage: any;
    currentFingerSequence: Array<any>;
    fingerSequence: Array<any>;
    fingers: Array<any>;
    tab: number;
    backendSession: any;
    repetitionControl: boolean;
    disabledControls: boolean;
    generateBMP: boolean;
    storeOriginalImage: boolean;
    modalSettings: any;
    failControl: any;
    unmatchCount: number;
    repeatedCount: number;
    badNfiqQualityCount: number;
    model: string;
    brand: string;
    serial: string;
    opened: boolean;
    fingersToCapture: Array<any>;
    editingId: number;
    isEditing: boolean;
    showLoader: boolean;
    loaderText: string;
    showControlDisable: boolean;
    serviceConfigs: any;
    isUpload: boolean;
    isManualSave: boolean;
    personInfo: any;
    selectedFinger: any;
    authenticationSimilarity: number;
    useOpenbioMatcherSt: boolean;
    cpfSt: string;
    singleCaptureSt: boolean;
    singleCaptureLoading: boolean;
    captureDone: boolean;
    startPreviewTime: number;
    previewActive: boolean;
    translations: any;
    locale: string;
    listenLocale(newValue: string): Promise<void>;
    setI18nParameters(locale: any): Promise<void>;
    componentWillLoad(): Promise<void>;
    clearImages(): void;
    setLoader(value: boolean, text?: string): void;
    startPreview(): void;
    stopPreview(): void;
    stopPreviewprocessor(): void;
    open(): void;
    executeRepetitionControl(): void;
    generateMinutiateData(): void;
    sendServiceTimeInformation(observations?: string, details?: string): Promise<void>;
    uploadFingerImage(_this: any, fingerIndex: any, image: any, fileOptions: any): Promise<void>;
    setProcessorFingers(): void;
    foundFlowType(sequence: Array<any>): any;
    prepareToPreview(): void;
    confirmSaveWithException(): Promise<any>;
    confirmSaveManually(): Promise<any>;
    callProcessors(data: any): void;
    nfiqEvaluation(data: any): Promise<void>;
    getPersonInfo(): Promise<void>;
    componentDidLoad(): Promise<void>;
    doesCountMatchFlow(fingersCount: number): boolean;
    componentDidUnload(): void;
    allFingersCollected(): boolean;
    setFingersFromBackendSession(): void;
    setCurrentFinger(): Promise<void>;
    setCurrentFingerImage(): void;
    currentFlowName(): string;
    parseFingerSequence(): void;
    checkSessionData(): void;
    setCaptureType(): void;
    isFlatSequence(): boolean;
    checkCaptureNeed(anomalyId?: number): any;
    insertPendingCapture(finger: any): Promise<void>;
    saveAmputatedHand(): Promise<void>;
    saveAnomaly(): Promise<void>;
    clearSession(): void;
    clearCapture(): void;
    saveFingers(fingersData?: any): Promise<any>;
    saveOriginalImage(): Promise<void>;
    storeCapturedFinger(saveFingersResult: any): void;
    getFlatFingerFromIndex(index: number): any;
    acceptData(): void;
    emitLoadInformation(): void;
    sendBiometryInformation(fingers: Array<any>): void;
    activeTabClass(num: number): "" | "is-active";
    setActiveTab(num: number): void;
    setSelection(event: any): void;
    setSelectionCaptureType(event: any): void;
    setSelectionFingerList(event: any): void;
    updateDisabledControls(): void;
    capturedNfiq(index: number): any;
    editFinger(_this: any, finger: any): void;
    loadStepPhaseOnEdit(): void;
    forceUpdate(): void;
    setAnomaly(fingerIndex: number, event: any): void;
    getNfiqClass(fingerIndex: number): number;
    anomaliesSelection(): JSX.Element[];
    getNfiqPreviewColor(nfiqScore: number): string;
    getNfiqScoreProgressBarValue(nfiqScore: number): number;
    render(): JSX.Element;
}
